import time
import sys
import pdb
import pd_base_tests
from ptf import config
from ptf.testutils import *
from ptf.thriftutils import *
from conn_mgr_pd_rpc.ttypes import *
from mc_pd_rpc.ttypes import *
from res_pd_rpc.ttypes import *
from devport_mgr_pd_rpc.ttypes import *
from ptf_port import *

###################################################################################
###                             LIBRARY
###################################################################################

# MAKE PORT
def make_port(pipe, local_port):
    assert pipe >= 0 and pipe < 4
    assert local_port >= 0 and local_port < 72
    return pipe << 7 | local_port

# CLEAR COUNTERS
def clear_counters(test, sess_hdl, dev_tgt_, pipe, app):
    test.conn_mgr.pktgen_set_trigger_counter(sess_hdl, dev_tgt_[pipe], app, 0)
    test.conn_mgr.pktgen_set_batch_counter(sess_hdl, dev_tgt_[pipe], app, 0)
    test.conn_mgr.pktgen_set_pkt_counter(sess_hdl, dev_tgt_[pipe], app, 0)

# PRINT COUNTERS
def print_counters(test, sess_hdl, dev_tgt_, pipe, app):
    print("\n\n")
    print("TRIGGER COUNTER:" + str(test.conn_mgr.pktgen_get_trigger_counter(sess_hdl, dev_tgt_[pipe], app)) + "\n")
    print("BATCH COUNTER:" + str(test.conn_mgr.pktgen_get_batch_counter(sess_hdl, dev_tgt_[pipe], app)) + "\n")
    print("PACKET COUNTER:" + str(test.conn_mgr.pktgen_get_pkt_counter(sess_hdl, dev_tgt_[pipe], app)) + "\n")

###################################################################################
###                             TEST FUNCTION
###################################################################################

class PktGen(pd_base_tests.ThriftInterfaceDataPlane):

    # INITIALIZE TEST
    def __init__(self):
        prefix=[]
        mod_name=[""]
        pd_base_tests.ThriftInterfaceDataPlane.__init__(self, mod_name, prefix)

    # RUN TEST
    def runTest(self):

        # @DPV pktgen pktsz begin
        # @DPV pktgen pktsz end

        # @DPV pktgen hdrsz begin
        # @DPV pktgen hdrsz end

        # @DPV pktgen numbtcs begin
        # @DPV pktgen numbtcs end

        # @DPV pktgen ibgnano begin
        # @DPV pktgen ibgnano end

        # @DPV pktgen numpkts begin
        # @DPV pktgen numpkts end

        # @DPV pktgen ipgnano begin
        # @DPV pktgen ipgnano end

        # ~~~~~~~~~~~~~~~~~~~~~~~

        dev_id = 0
        pipe = 0
        port = 68
        app = 0
        srcport = 8

        pktlen = (pktsz - hdrsz)
        #pktlen = pktsz

        # offset from which retrieve data for generating packets
        bufoffset = 0

        # trigger type
        trigger = PktGenTriggerType_t.TIMER_ONE_SHOT
        timernano = 100

        # ~~~~~~~~~~~~~~~~~~~~~~~

        # INITIALIZE SESSION & DEVICE TARGET
        sess_hdl = self.conn_mgr.client_init()
        dev_tgt = DevTarget_t(dev_id, hex_to_i16(0xFFFF))
        dev_tgt_ = []
        dev_tgt_.append(DevTarget_t(dev_id, hex_to_i16(pipe)))

        # CLEAR COUNTERS
        clear_counters(self, sess_hdl, dev_tgt_, pipe, app)

        # PRINT COUNTERS
        print_counters(self, sess_hdl, dev_tgt_, pipe, app)

        # PKTGEN ENABLE
        self.conn_mgr.pktgen_enable(sess_hdl, dev_id,  make_port(pipe,port))

        # APP CONFIGURATION
        appcfg = PktGenAppCfg_t(
                             trigger_type=trigger,
                             batch_count=(numbtcs-1),
                             pkt_count=(numpkts-1),
                             pattern_key=0,
                             pattern_msk=0,
                             timer=timernano,
                             ibg=ibgnano,
                             ibg_jitter=0,
                             ipg=ipgnano,
                             ipg_jitter=0,
                             src_port=srcport,
                             src_port_inc=0,
                             buffer_offset=bufoffset,
                             length=pktlen
                             )
        self.conn_mgr.pktgen_cfg_app(sess_hdl, dev_tgt_[pipe], app, appcfg)

        # BUFFER CONFIGURATION
        packet = simple_eth_packet(pktlen=pktlen)
        self.conn_mgr.pktgen_write_pkt_buffer(sess_hdl, dev_tgt_[pipe], bufoffset, pktlen, str(packet))

        # APP ENABLE
        self.conn_mgr.pktgen_app_enable(sess_hdl, dev_tgt_[pipe], app)

        # COMPLETE OPERATIONS
        self.conn_mgr.complete_operations(sess_hdl)

        # SLEEP
        time.sleep(1)

        # PRINT COUNTERS
        print_counters(self, sess_hdl, dev_tgt_, pipe, app)

        # APP DISABLE
        self.conn_mgr.pktgen_app_disable(sess_hdl, dev_tgt_[pipe], app)

        # PKTGEN DISABLE
        self.conn_mgr.pktgen_disable(sess_hdl, dev_id, make_port(pipe, port))

        # CLIENT CLEANUP
        sess_hdl = self.conn_mgr.client_cleanup(sess_hdl)
